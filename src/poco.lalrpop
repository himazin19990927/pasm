use std::str::FromStr;
use crate::{token::*, register::*, mnemonic::*};

grammar;

pub File: Vec<Item> = {
    <Item*>
}

pub Item: Item = {
    ":" <label: "Ident"> => Item::Label(label),
    <mnemonic: Mnemonic> => Item::Mnemonic(mnemonic),
}

Mnemonic: Mnemonic = {
    <InstructionR>,
    <InstructionI>,
    <InstructionB>,
    <InstructionJ>,
    <InstructionJR>,
};

InstructionR: Mnemonic = {
    "NOP" => Mnemonic::instr_r(FunctR::NOP, Register::R0, Register::R0),
    "MV" <dst: Register> "," <src: Register> => Mnemonic::instr_r(FunctR::MV, dst, src),
    "AND" <dst: Register> "," <src: Register> => Mnemonic::instr_r(FunctR::AND, dst, src),
    "OR" <dst: Register> "," <src: Register> => Mnemonic::instr_r(FunctR::OR, dst, src),
    "SL" <dst: Register> => Mnemonic::instr_r(FunctR::SL, dst, Register::R0),
    "SR" <dst: Register> => Mnemonic::instr_r(FunctR::SR, dst, Register::R0),
    "ADD" <dst: Register> "," <src: Register> => Mnemonic::instr_r(FunctR::ADD, dst, src),
    "SUB" <dst: Register> "," <src: Register> => Mnemonic::instr_r(FunctR::SUB, dst, src),
    "ST" <src: Register> "," <addr: Parenthesized> => Mnemonic::instr_r(FunctR::ST, src, addr),
    "LD" <dst: Register> "," <src: Parenthesized> => Mnemonic::instr_r(FunctR::LD, dst, src),
}

InstructionI: Mnemonic = {
    "LDI" <dst: Register> "," <imm: Immediate> => Mnemonic::instr_i(OpcodeI::LDI, dst, imm),
    "LDIU" <dst: Register> "," <imm: Immediate> => Mnemonic::instr_i(OpcodeI::LDIU, dst, imm),
    "ADDI" <dst: Register> "," <imm: Immediate> => Mnemonic::instr_i(OpcodeI::ADDI, dst, imm),
    "ADDIU" <dst: Register> "," <imm: Immediate> => Mnemonic::instr_i(OpcodeI::ADDIU, dst, imm),
    "LDHI" <dst: Register> "," <imm: Immediate> => Mnemonic::instr_i(OpcodeI::LDHI, dst, imm),
}

InstructionB: Mnemonic = {
    "BEZ" <src: Register> "," <label: "Ident"> => Mnemonic::instr_b(OpcodeB::BEZ, src, label),
    "BNZ" <src: Register> "," <label: "Ident"> => Mnemonic::instr_b(OpcodeB::BNZ, src, label),
    "BPL" <src: Register> "," <label: "Ident"> => Mnemonic::instr_b(OpcodeB::BPL, src, label),
    "BMI" <src: Register> "," <label: "Ident"> => Mnemonic::instr_b(OpcodeB::BMI, src, label),
}

InstructionJ: Mnemonic = {
    "JMP" <label: "Ident"> => Mnemonic::instr_j(OpcodeJ::JMP, label),
    "JAL" <label: "Ident"> => Mnemonic::instr_j(OpcodeJ::JAL, label),
}

InstructionJR: Mnemonic = {
    "JR" <dst: Register> => Mnemonic::instr_jr(FunctJR::JR, dst),
    "JALR" <dst: Register> => Mnemonic::instr_jr(FunctJR::JALR, dst),
}

pub Register: Register = {
    "R0" => Register::R0,
    "R1" => Register::R1,
    "R2" => Register::R2,
    "R3" => Register::R3,
    "R4" => Register::R4,
    "R5" => Register::R5,
    "R6" => Register::R6,
    "R7" => Register::R7,
};

Parenthesized: Register = {
    "(" <Register> ")",
};

Immediate: i8 = {
    "#" "-" <imm: "Num"> => -i8::from_str(imm.as_str()).unwrap(),
    "#" <imm: "Num"> => i8::from_str(imm.as_str()).unwrap(),
}

extern {
    type Location = ();
    type Error = ();

    enum Token{
        "Num" => Token::Num(<String>),
        "Ident" => Token::Ident(<String>),

        "NOP" => Token::NOP,
        "MV" => Token::MV,
        "AND" => Token::AND,
        "OR" => Token::OR,
        "SL" => Token::SL,
        "SR" => Token::SR,
        "ADD" => Token::ADD,
        "SUB" => Token::SUB,
        "ST" => Token::ST,
        "LD" => Token::LD,

        "LDI" => Token::LDI,
        "LDIU" => Token::LDIU,
        "ADDI" => Token::ADDI,
        "ADDIU" => Token::ADDIU,
        "LDHI" => Token::LDHI,

        "BEZ" => Token::BEZ,
        "BNZ" => Token::BNZ,
        "BPL" => Token::BPL,
        "BMI" => Token::BMI,

        "JMP" => Token::JMP,
        "JAL" => Token::JAL,

        "JR" => Token::JR,
        "JALR" => Token::JALR,

        "R0" => Token::R0,
        "R1" => Token::R1,
        "R2" => Token::R2,
        "R3" => Token::R3,
        "R4" => Token::R4,
        "R5" => Token::R5,
        "R6" => Token::R6,
        "R7" => Token::R7,

        "#" => Token::Sharp,
        "-" => Token::Minus,
        "," => Token::Comma,
        ":" => Token::Colon,
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,
    }
}